// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getUserById = `-- name: GetUserById :one
SELECT id, balance FROM users
WHERE id = $1 LIMIT 1
`

type GetUserByIdRow struct {
	ID      int64          `json:"id"`
	Balance pgtype.Numeric `json:"balance"`
}

func (q *Queries) GetUserById(ctx context.Context, id int64) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(&i.ID, &i.Balance)
	return i, err
}

const getUserForUpdate = `-- name: GetUserForUpdate :one
SELECT id, balance, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
FOR UPDATE
`

func (q *Queries) GetUserForUpdate(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserForUpdate, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserBalance = `-- name: UpdateUserBalance :exec
UPDATE users
set balance = $2,
    updated_at = NOW()
WHERE id = $1
`

type UpdateUserBalanceParams struct {
	ID      int64          `json:"id"`
	Balance pgtype.Numeric `json:"balance"`
}

func (q *Queries) UpdateUserBalance(ctx context.Context, arg UpdateUserBalanceParams) error {
	_, err := q.db.Exec(ctx, updateUserBalance, arg.ID, arg.Balance)
	return err
}
